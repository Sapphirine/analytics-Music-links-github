Prerequisite: install mahout

Clustering steps:
1.export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_67.jdk/Contents/Home
export PATH=$JAVA_HOME/bin:$PATH
export MAHOUT_LOCAL=TRUE    //setup locally

2. cd mahout-trunk/bin     //change to the mahout directory

(**all the directories mentioned below are under Music-Links/)
3. mkdir initpoint       //create a new directory to store initial points

4. ./mahout org.apache.mahout.clustering.conversion.InputDriver -i data/location.csv -o testoutput/vectorfiles -v org.apache.mahout.math.RandomAccessSparseVector     //generate vector files

5. ./mahout kmeans -i testoutput/vectorfiles -o testoutput/kmeans_10 -c initpoint -cd 0.5 -x 100 -cl -k 10 -ow      //do kmeans cluster with 10 clusters, maximum 10 iterations and 0.5 similarity threshold

6. mdfind "final" -onlyin testoutput/kmeans-10-100  //find out the directory with the name  final

7. ./mahout clusterdump -i testoutput/kmeans_10/clusters-8-file -o center_10.txt  //output central points, and input file directory is the result of command 6

8. ./mahout seqdumper -i testoutput/kmeans_10/clusteredPoints/part-m-00000 -o points_10    //output clustering results

9. rm -rf testoutput/vectorfiles   //remove existing file if you want to redo step 4 


10.run ClusteridToTweet.java in eclipse to combine clustering information with tweet dataset



File API:

App  <-n  -id>
Driver for the nodejs application. Outputs recommendations.
	-n <String>: The number of recommendations
	-id <String>: The user id

Recommendations <-id  -f  -o  -i  -n>
Generates user recommendations.
	-id <String>: The user id
	-f <String>: The path to the user tweet frequencies per cluster.
	-o <String>:  The path to the recommendation output directory.
	-i <String>: The path to the cluster directory.
	-n <String>: The number of recommendations.

ClusteridToTweet <-cc -p -t -o>
Generate tweet dataset combined with a new cluster id colum
	-cc <String>: The path of the file stored cluster centers 
	-p <String>: The path of the file stored cluster id 
	-t <String>: The path to the original tweet dataset
	-o <String>: The path to new generated tweet file

TrackIDToName <-i  -t  -a  -o>
Takes a file with track id and rating and outputs track name and artist name.
	-i <String>: Path to input file with track ids
	-t <String>: Path to track database file
	-a <String>: Path to artist database file
	-o <String>: Directory to output file with names and artists.

CombineRecommendations <-i  -n>
Final step in recommender. Takes directory with cluster recommendation files and aggregates them into amount requested.
	-i <String>: Path to recommendation directory
	-n <String>: Number of recommendations desired

ClusterUserSearch <-i  -o  -nf>
Counts and records the number of tweets each user has within each cluster.
	-i <String>: Path to cluster file directory
	-o <String>: Path for new output file
	-nf <String>: number of clusters (number of files in the cluster directory).

GetSongInfo <-t  -a>
Takes track and artist file paths as input and prints out the name and artist of every song in the database files.
	-t <String>: Path to track database file
	-a <String>: Path to artist database file

AddMusic <-cc  -cd  -f  -i  -t>
Adds a new song preference into the appropriate cluster file and updates the user tweet frequency per cluster. **Does not update the main database file. A recluster would delete these entries**
	-cc <String>: Path to the file with the cluster centers coordinates
	-cd <String>: Path to the cluster directory
	-f <String>: Path to the user tweet frequency per cluster file
	-i <String>: New entry to the clusterfile. <userid \t track name \t longitude \t latitude>
	-t <String>: Path to the tracks database file
